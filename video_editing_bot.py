import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
import logging
import os

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"  # –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –æ—Ç BotFather
ADMIN_ID = 123456789  # —Ç–≤–æ–π Telegram user ID (—É–∑–Ω–∞—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ @userinfobot)

# --- –õ–û–ì–ò ---
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# --- –ö–ù–û–ü–ö–ò ---
def main_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="üé¨ –ó–∞–∫–∞–∑–∞—Ç—å –º–æ–Ω—Ç–∞–∂", callback_data="order")
    kb.button(text="üí∏ –ü—Ä–∞–π—Å", callback_data="price")
    kb.button(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")
    kb.adjust(1)
    return kb.as_markup()

@dp.message(F.text == "/start")
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –≤–∏–¥–µ–æ–º–æ–Ω—Ç–∞–∂–∞ –æ—Ç <b>hellayate</b>.\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=main_menu())

# --- –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ---
@dp.callback_query(F.data == "price")
async def show_price(callback: CallbackQuery):
    text = (
        "<b>üí∏ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç:</b>\n\n"
        "‚Ä¢ TikTok / Reels ‚Äî –æ—Ç 5$\n"
        "‚Ä¢ YouTube (–¥–æ 10 –º–∏–Ω) ‚Äî –¥–æ 15$\n"
        "‚Ä¢ YouTube (10+ –º–∏–Ω) ‚Äî –æ—Ç 15$\n"
        "‚Ä¢ –î–æ–ø. —ç—Ñ—Ñ–µ–∫—Ç—ã, —Å—É–±—Ç–∏—Ç—Ä—ã, –≥—Ä–∞—Ñ–∏–∫–∞ ‚Äî –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ"
    )
    await callback.message.edit_text(text, reply_markup=main_menu())

@dp.callback_query(F.data == "contacts")
async def show_contacts(callback: CallbackQuery):
    text = (
        "<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n\n"
        "‚Ä¢ Telegram: @hellayate\n"
        "‚Ä¢ WhatsApp: wa.me/123456789\n"
        "‚Ä¢ Instagram: instagram.com/hellayate"
    )
    await callback.message.edit_text(text, reply_markup=main_menu())

# --- –ó–ê–ö–ê–ó ---
user_orders = {}

@dp.callback_query(F.data == "order")
async def start_order(callback: CallbackQuery):
    user_orders[callback.from_user.id] = {}
    await callback.message.answer("–ö–∞–∫–æ–π —Ç–∏–ø –≤–∏–¥–µ–æ? (YouTube / TikTok / Reels)")

@dp.message(F.text)
async def collect_order(message: Message):
    uid = message.from_user.id
    if uid not in user_orders:
        return

    order = user_orders[uid]

    if "type" not in order:
        order["type"] = message.text
        await message.answer("–ö–∞–∫–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å? (–≤ –º–∏–Ω—É—Ç–∞—Ö)")
    elif "duration" not in order:
        order["duration"] = message.text
        await message.answer("–ï—Å—Ç—å –ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã? (—Å—Å—ã–ª–∫–∏ –∏–ª–∏ "–Ω–µ—Ç")")
    elif "materials" not in order:
        order["materials"] = message.text
        await message.answer("–ï—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –º–æ–Ω—Ç–∞–∂—É? (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç')")
    elif "notes" not in order:
        order["notes"] = message.text
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

        text = (
            f"<b>üì• –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:</b>\n"
            f"üë§ @{message.from_user.username or message.from_user.full_name}\n"
            f"üìπ –¢–∏–ø: {order['type']}\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {order['duration']}\n"
            f"üìé –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {order['materials']}\n"
            f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: {order['notes']}"
        )
        await bot.send_message(ADMIN_ID, text)
        user_orders.pop(uid)

# --- –ó–ê–ü–£–°–ö ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
